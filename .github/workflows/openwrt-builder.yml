#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-builder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: üöÄ OpenWrt Builder

# ================================================================================
# Trigger Configuration
# ================================================================================
on:
  repository_dispatch:
    types: [Source-Code-Update]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'üõ†Ô∏è Build Type'
        required: false
        default: 'standard'
        type: choice
        options:
        - standard
        - debug
        - minimal
      upload_firmware:
        description: 'üì§ Upload Firmware'
        required: false
        default: true
        type: boolean
      upload_release:
        description: 'üéØ Create Release'
        required: false
        default: true
        type: boolean

# ================================================================================
# Jobs Configuration
# ================================================================================
jobs:
  build:
    name: üèóÔ∏è Build OpenWrt Firmware
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    
    steps:
      # ============================================================================
      # Preparation Phase
      # ============================================================================
      - name: üöÄ Initialize Build Environment
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN || secrets.GITHUB_TOKEN }}

      - name: üõ†Ô∏è Load Configuration & Setup Environment
        run: |
          echo "::group::üîß Configuration Loading"
          
          # Load configuration from config.env
          if [ -f ".github/workflows/config.env" ]; then
            echo "üìã Loading configuration from config.env..."
            # Source the config file and export all variables
            while IFS='=' read -r key value; do
              # Skip comments and empty lines
              [[ $key =~ ^[[:space:]]*# ]] && continue
              [[ -z $key ]] && continue
              # Remove quotes from value and export
              value=$(echo "$value" | sed 's/^"\(.*\)"$/\1/')
              export "$key=$value"
              echo "$key=$value" >> $GITHUB_ENV
            done < .github/workflows/config.env
            echo "‚úÖ Configuration loaded successfully"
          else
            echo "‚ùå Configuration file not found!"
            exit 1
          fi
          
          # Set dynamic environment variables
          echo "BUILD_TYPE=${{ github.event_name == 'workflow_dispatch' && 'manual' || 'auto' }}" >> $GITHUB_ENV
          echo "TZ=$TZ" >> $GITHUB_ENV
          
          # Override upload settings if provided via inputs
          if [ "${{ github.event.inputs.upload_firmware }}" != "" ]; then
            echo "UPLOAD_FIRMWARE=${{ github.event.inputs.upload_firmware }}" >> $GITHUB_ENV
          fi
          if [ "${{ github.event.inputs.upload_release }}" != "" ]; then
            echo "UPLOAD_RELEASE=${{ github.event.inputs.upload_release }}" >> $GITHUB_ENV
          fi
          
          echo "::endgroup::"

      - name: üìÅ Setup Configuration Branch
        run: |
          echo "::group::üîß Configuration Branch Setup"
          
          # Setup Git configuration
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions Bot"
          
          # Check out configuration branch to read existing records
          if git rev-parse --verify origin/$CONFIG_BRANCH >/dev/null 2>&1; then
            echo "üìÇ Config branch exists, checking out..."
            git fetch origin $CONFIG_BRANCH
            git checkout $CONFIG_BRANCH
            
            # Copy config files to main branch working directory for use during build
            git checkout ${{ github.ref_name }}
            git show $CONFIG_BRANCH:$OP_UPDATES_001 > $OP_UPDATES_001 2>/dev/null || true
            git show $CONFIG_BRANCH:$OP_UPDATES_002 > $OP_UPDATES_002 2>/dev/null || true
            git show $CONFIG_BRANCH:$OP_UPDATES_003 > $OP_UPDATES_003 2>/dev/null || true
            git show $CONFIG_BRANCH:$QMODEM_UPDATES_001 > $QMODEM_UPDATES_001 2>/dev/null || true
            git show $CONFIG_BRANCH:$QMODEM_UPDATES_002 > $QMODEM_UPDATES_002 2>/dev/null || true
            git show $CONFIG_BRANCH:$QMODEM_UPDATES_003 > $QMODEM_UPDATES_003 2>/dev/null || true
          else
            echo "‚ö†Ô∏è Config branch does not exist, will be created later"
          fi
          
          echo "‚úÖ Configuration branch setup completed"
          echo "::endgroup::"

      - name: üìã Display Build Information
        run: |
          echo "::group::üîç Build Configuration"
          echo "üìÖ Build Time: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "üè∑Ô∏è Build Type: $BUILD_TYPE"
          echo "üéØ Trigger: ${{ github.event_name }}"
          echo "üîß Runner: $(uname -a)"
          echo "üìÇ Working Directory: $(pwd)"
          echo "üåê Repository: ${{ github.repository }}"
          echo "üìä Workflow: ${{ github.workflow }}"
          echo "::endgroup::"

      # ============================================================================
      # System Setup Phase
      # ============================================================================
      - name: üõ†Ô∏è Setup Build Dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "::group::üîß System Preparation"
          
          echo "üßπ Cleaning up system packages..."
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
          
          echo "üì¶ Updating package lists..."
          sudo -E apt-get -qq update
          
          echo "‚öôÔ∏è Installing build dependencies..."
          if [ -f "$GITHUB_WORKSPACE/depends/ubuntu-22.04" ]; then
            sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/depends/ubuntu-22.04)
          else
            echo "‚ö†Ô∏è Dependencies file not found, using default packages"
            sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget
          fi
          
          echo "üêç Setting up Python environment..."
          if ! command -v pip3 >/dev/null 2>&1; then
            wget -q https://bootstrap.pypa.io/pip/3.6/get-pip.py
            sudo python3 get-pip.py
            sudo rm -f get-pip.py
          fi
          sudo pip3 install pyelftools
          
          echo "::endgroup::"
          
          echo "::group::üßπ System Cleanup"
          
          echo "üê≥ Cleaning Docker images..."
          docker rmi $(docker images -q) 2>/dev/null || true
          docker image prune -a -f 2>/dev/null || true
          
          echo "üóëÔ∏è Removing unnecessary packages..."
          sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* 2>/dev/null || true
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          
          echo "üïê Setting timezone..."
          sudo timedatectl set-timezone "$TZ"
          
          echo "üìÅ Creating work directory..."
          sudo mkdir -p /mnt/workdir
          sudo chown $USER:$GROUPS /mnt/workdir
          
          echo "::endgroup::"

      - name: üìä System Resource Check
        run: |
          echo "::group::üíª Hardware Information"
          
          echo "üîß CPU Information:"
          echo "  Physical CPUs: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "  CPU Cores: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)"
          echo ""
          
          echo "üíæ Memory Information:"
          echo "  Installed Memory:"
          sudo lshw -short -C memory | grep GiB 2>/dev/null || echo "  Unable to detect memory details"
          echo ""
          
          echo "üíø Disk Information:"
          echo "  Available Disks: $(ls /dev/sd* 2>/dev/null | grep -v [1-9] | wc -l)"
          echo "  Disk Usage:"
          df -hT $PWD
          
          echo "::endgroup::"
          
          # Warn about resource constraints
          available_space=$(df . | tail -1 | awk '{print $4}')
          if [ "$available_space" -lt 20971520 ]; then  # Less than 20GB
            echo "‚ö†Ô∏è Warning: Low disk space detected! Available: $(df -h . | tail -1 | awk '{print $4}')"
            echo "::warning::Low disk space may cause build failures"
          fi

      # ============================================================================
      # Source Code Phase
      # ============================================================================
      - name: üì• Clone Source Code
        working-directory: /mnt/workdir
        run: |
          echo "::group::üì¶ Source Code Acquisition"
          
          echo "üíø Available space before clone:"
          df -hT $PWD
          
          echo "üîÑ Cloning OpenWrt source code..."
          echo "  Repository: $OP_URL"
          echo "  Branch: $OP_BRANCH"
          
          if git clone --depth 1 "$OP_URL" -b "$OP_BRANCH" openwrt; then
            echo "‚úÖ Successfully cloned OpenWrt source"
          else
            echo "‚ùå Failed to clone OpenWrt source"
            exit 1
          fi
          
          # Create symbolic link
          ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
          
          echo "üìä Source code statistics:"
          cd openwrt
          echo "  Commit: $(git rev-parse HEAD)"
          echo "  Author: $(git log -1 --format='%an <%ae>')"
          echo "  Date: $(git log -1 --format='%ci')"
          echo "  Message: $(git log -1 --format='%s')"
          
          echo "üíø Space after clone:"
          df -hT $PWD
          
          echo "::endgroup::"

      # ============================================================================
      # Configuration Tracking Phase
      # ============================================================================
      - name: üìã Update Build Configuration Records
        run: |
          echo "::group::üìù Configuration Management"
          
          # Get current build information
          current_time=$(date -Iseconds)
          build_type="$BUILD_TYPE"
          
          echo "üïê Build Time: $current_time"
          echo "üè∑Ô∏è Build Type: $build_type"
          
          # Function to update repository records
          update_repo_records() {
            local repo_url="$1"
            local repo_branch="$2"
            local prefix="$3"
            local display_name="$4"
            
            echo "üì¶ Updating records for $display_name..."
            
            # Clone repository to get commit info
            if git clone --depth 10 "$repo_url" -b "$repo_branch" "temp_${prefix}"; then
              cd "temp_${prefix}"
              
              # Get commit information
              git log --oneline -10 --format="%H|%h|%s|%an|%ci" > "../commit_list.tmp"
              current_commit=$(git rev-parse HEAD)
              
              cd ..
              rm -rf "temp_${prefix}"
              
              # Rotate update files (003 <- 002 <- 001 <- new)
              if [ -f "${prefix}_updates_002.txt" ]; then
                cp "${prefix}_updates_002.txt" "${prefix}_updates_003.txt"
              fi
              
              if [ -f "${prefix}_updates_001.txt" ]; then
                cp "${prefix}_updates_001.txt" "${prefix}_updates_002.txt"
              fi
              
              # Create new update record
              {
                echo "# $display_name Update Record - Version 001 (Latest)"
                echo "# This file stores the latest update information for $repo_url"
                echo "# Format: commit_hash|short_hash|subject|author|timestamp"
                echo "# Generated: $current_time"
                echo "# Build Type: $build_type"
                echo "# Repository Type: $display_name"
                echo ""
                echo "ÁºñËØëÊó∂Èó¥: $current_time"
                echo "ÁºñËØëÁ±ªÂûã: $build_type"
                echo "‰ªìÂ∫ìÁ±ªÂûã: $display_name"
                echo "Êõ¥Êñ∞ÂÜÖÂÆπ:"
                cat "commit_list.tmp"
              } > "${prefix}_updates_001.txt"
              
              rm -f "commit_list.tmp"
              echo "‚úÖ Updated $display_name records"
            else
              echo "‚ö†Ô∏è Failed to clone $display_name repository for record update"
            fi
          }
          
          # Update OP repository records
          update_repo_records "$OP_URL" "$OP_BRANCH" "op" "OP (coolsnowwolf/lede)"
          
          echo "::endgroup::"

      # ============================================================================
      # Build Configuration Phase
      # ============================================================================
      - name: üîß QModem Integration
        working-directory: /mnt/workdir/openwrt
        run: |
          echo "::group::üì± QModem Repository Integration"
          
          echo "üîÑ Cloning QModem repository..."
          if git clone "$QMODEM_URL" -b "$QMODEM_BRANCH" qmodem_temp; then
            echo "‚úÖ Successfully cloned QModem repository"
            
            # Integrate QModem files if needed
            echo "üì¶ QModem commit information:"
            cd qmodem_temp
            echo "  Commit: $(git rev-parse HEAD)"
            echo "  Author: $(git log -1 --format='%an <%ae>')"
            echo "  Date: $(git log -1 --format='%ci')"
            echo "  Message: $(git log -1 --format='%s')"
            
            # Copy relevant files if they exist
            if [ -d "package" ]; then
              echo "üì¶ Integrating QModem packages..."
              cp -r package/* ../package/ 2>/dev/null || echo "No packages to copy"
            fi
            
            cd ..
            rm -rf qmodem_temp
          else
            echo "‚ö†Ô∏è Failed to clone QModem repository - continuing without it"
          fi
          
          echo "::endgroup::"

      - name: üçΩÔ∏è Configure Feeds
        working-directory: /mnt/workdir/openwrt
        run: |
          echo "::group::üçΩÔ∏è Feed Configuration"
          
          # Load custom feeds configuration if it exists
          if [ -f "$GITHUB_WORKSPACE/$FEEDS_CONF" ]; then
            echo "üìã Loading custom feeds configuration..."
            cp "$GITHUB_WORKSPACE/$FEEDS_CONF" feeds.conf.default
            echo "‚úÖ Custom feeds configuration loaded"
          else
            echo "üìã Using default feeds configuration"
          fi
          
          # Display feeds configuration
          echo "üìÑ Current feeds configuration:"
          cat feeds.conf.default
          
          echo "::endgroup::"

      - name: üéõÔ∏è Install DIY Scripts
        run: |
          echo "::group::üéõÔ∏è DIY Script Installation"
          
          # Install DIY script part 1 (before feeds update)
          if [ -f "$DIY_P1_SH" ]; then
            echo "üîß Running DIY script part 1..."
            chmod +x "$DIY_P1_SH"
            cd /mnt/workdir/openwrt
            $GITHUB_WORKSPACE/$DIY_P1_SH
            echo "‚úÖ DIY script part 1 completed"
          else
            echo "üìù No DIY script part 1 found"
          fi
          
          echo "::endgroup::"

      - name: üì¶ Update and Install Feeds
        working-directory: /mnt/workdir/openwrt
        run: |
          echo "::group::üì¶ Feed Management"
          
          echo "üîÑ Updating feeds..."
          ./scripts/feeds update -a
          
          echo "‚öôÔ∏è Installing feeds..."
          ./scripts/feeds install -a
          
          echo "üìä Feed statistics:"
          ./scripts/feeds list | wc -l | xargs echo "Total packages:"
          
          echo "::endgroup::"

      - name: ‚öôÔ∏è Load Build Configuration
        run: |
          echo "::group::‚öôÔ∏è Build Configuration"
          
          # Load custom configuration
          if [ -f "$CONFIG_FILE" ]; then
            echo "üìã Loading custom build configuration..."
            cp "$CONFIG_FILE" /mnt/workdir/openwrt/.config
            echo "‚úÖ Custom configuration loaded"
          else
            echo "‚ö†Ô∏è No custom configuration found - using defaults"
            echo "CONFIG_TARGET_x86=y" > /mnt/workdir/openwrt/.config
            echo "CONFIG_TARGET_x86_64=y" >> /mnt/workdir/openwrt/.config
          fi
          
          # Run DIY script part 2 (after feeds installation)
          if [ -f "$DIY_P2_SH" ]; then
            echo "üîß Running DIY script part 2..."
            chmod +x "$DIY_P2_SH"
            cd /mnt/workdir/openwrt
            $GITHUB_WORKSPACE/$DIY_P2_SH
            echo "‚úÖ DIY script part 2 completed"
          else
            echo "üìù No DIY script part 2 found"
          fi
          
          echo "::endgroup::"

      # ============================================================================
      # Build Preparation Phase
      # ============================================================================
      - name: üì• Download Packages
        working-directory: /mnt/workdir/openwrt
        run: |
          echo "::group::üì• Package Download"
          
          echo "üîß Generating final configuration..."
          make defconfig
          
          echo "üì¶ Downloading packages..."
          make download -j8
          
          # Check for download failures
          find dl -size -1024c -exec ls -l {} \; | tee download_failures.log
          if [ -s download_failures.log ]; then
            echo "‚ö†Ô∏è Some packages failed to download:"
            cat download_failures.log
            echo "::warning::Some packages failed to download - build may fail"
          else
            echo "‚úÖ All packages downloaded successfully"
          fi
          
          echo "üíø Storage usage after download:"
          df -hT $PWD
          
          echo "::endgroup::"

      # ============================================================================
      # Main Build Phase
      # ============================================================================
      - name: üèóÔ∏è Compile Firmware
        working-directory: /mnt/workdir/openwrt
        run: |
          echo "::group::üèóÔ∏è Firmware Compilation"
          
          build_start_time=$(date +%s)
          echo "üöÄ Starting firmware compilation at $(date)"
          echo "üîß Build Type: $BUILD_TYPE"
          
          # Determine build parameters based on type
          case "${{ github.event.inputs.build_type || 'standard' }}" in
            "debug")
              echo "üêõ Debug build - single threaded with verbose output"
              make V=s -j1
              ;;
            "minimal")
              echo "‚ö° Minimal build - reduced features"
              make -j$(($(nproc)+1))
              ;;
            *)
              echo "üè≠ Standard build - optimized for speed"
              make -j$(($(nproc)+1)) || make -j1 V=s
              ;;
          esac
          
          build_end_time=$(date +%s)
          build_duration=$((build_end_time - build_start_time))
          echo "‚è±Ô∏è Build completed in $(($build_duration / 60)) minutes and $(($build_duration % 60)) seconds"
          
          echo "üìä Build statistics:"
          echo "  Start: $(date -d @$build_start_time)"
          echo "  End: $(date -d @$build_end_time)"
          echo "  Duration: $(($build_duration / 60))m $(($build_duration % 60))s"
          
          echo "üíø Final storage usage:"
          df -hT $PWD
          
          echo "::endgroup::"

      # ============================================================================
      # Post-Build Phase
      # ============================================================================
      - name: üìä Build Status Check
        id: build_status
        working-directory: /mnt/workdir/openwrt
        run: |
          echo "::group::üìä Build Result Analysis"
          
          if [ -d "bin/targets" ]; then
            echo "‚úÖ Build successful - firmware files generated"
            
            echo "üì¶ Generated firmware files:"
            find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.vmdk" | head -10
            
            # Count and size of generated files
            file_count=$(find bin/targets -type f \( -name "*.bin" -o -name "*.img" -o -name "*.vmdk" \) | wc -l)
            total_size=$(find bin/targets -type f \( -name "*.bin" -o -name "*.img" -o -name "*.vmdk" \) -exec du -c {} + | tail -1 | cut -f1)
            
            echo "üìà Build summary:"
            echo "  Generated files: $file_count"
            echo "  Total size: $(($total_size / 1024))MB"
            
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Build failed - no firmware files generated"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "::endgroup::"

      - name: üì¶ Organize Firmware Files
        id: organize
        if: steps.build_status.outputs.status == 'success'
        run: |
          echo "::group::üì¶ Firmware Organization"
          
          CURRENT_PATH=$(pwd)
          
          # Navigate to firmware directory
          cd /mnt/workdir/openwrt/bin/targets/*/*
          TARGET_PATH=$(pwd)
          echo "üìÇ Firmware location: ${TARGET_PATH}"
          
          # Clean up packages directory
          rm -rf packages
          
          # Create new version directory
          NEW_VERSION="${FIRMWARE_PREFIX}_$VERSION_LATEST"
          mkdir -p "$NEW_VERSION"
          
          # Move all firmware files to version directory
          mv * "$NEW_VERSION/" 2>/dev/null || true
          
          # Create compressed archive
          echo "üóúÔ∏è Creating firmware archive..."
          zip -r "firmware_new.zip" "$NEW_VERSION/"
          
          if [ ! -f "firmware_new.zip" ]; then
            echo "‚ùå Failed to create firmware archive"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Prepare archive directory
          cd "$CURRENT_PATH"
          mkdir -p "$ARTIFACT_DIR"
          cd "$ARTIFACT_DIR"
          
          echo "üìã Current firmware files:"
          ls -lh *.zip 2>/dev/null || echo "No existing firmware files"
          
          # Version rotation (oldest <- previous <- current <- new)
          echo "üîÑ Performing version rotation..."
          
          # Move 002 to 003 (if exists)
          if [ -f "${FIRMWARE_PREFIX}_$VERSION_PREVIOUS.zip" ]; then
            echo "  Moving $VERSION_PREVIOUS ‚Üí $VERSION_OLDEST"
            mv "${FIRMWARE_PREFIX}_$VERSION_PREVIOUS.zip" "${FIRMWARE_PREFIX}_$VERSION_OLDEST.zip"
          fi
          
          # Move 001 to 002 (if exists)
          if [ -f "${FIRMWARE_PREFIX}_$VERSION_LATEST.zip" ]; then
            echo "  Moving $VERSION_LATEST ‚Üí $VERSION_PREVIOUS"
            mv "${FIRMWARE_PREFIX}_$VERSION_LATEST.zip" "${FIRMWARE_PREFIX}_$VERSION_PREVIOUS.zip"
          fi
          
          # Place new version as 001
          echo "  Installing new version as $VERSION_LATEST"
          cp "${TARGET_PATH}/firmware_new.zip" "${FIRMWARE_PREFIX}_$VERSION_LATEST.zip"
          
          echo "‚úÖ Final firmware collection:"
          ls -lh *.zip 2>/dev/null || echo "No firmware files found"
          
          # Verify file integrity
          echo "üîç Verifying file integrity..."
          for zip_file in *.zip; do
            if [ -f "$zip_file" ]; then
              if unzip -t "$zip_file" >/dev/null 2>&1; then
                echo "  ‚úÖ $zip_file: OK"
              else
                echo "  ‚ùå $zip_file: Corrupted - removing"
                rm -f "$zip_file"
              fi
            fi
          done
          
          echo "FIRMWARE=$ARTIFACT_DIR" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"

      # ============================================================================
      # Release Generation Phase
      # ============================================================================
      - name: üìù Generate Release Notes
        id: release_note
        if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success'
        run: |
          echo "::group::üìù Release Notes Generation"
          
          OP_OWNER=$(echo "$OP_URL" | cut -d'/' -f4)
          OP_NAME=$(echo "$OP_URL" | cut -d'/' -f5 | cut -d'.' -f1)
          QMODEM_OWNER=$(echo "$QMODEM_URL" | cut -d'/' -f4)
          QMODEM_NAME=$(echo "$QMODEM_URL" | cut -d'/' -f5 | cut -d'.' -f1)
          
          RELEASE_NOTE_FILE="release_notes.md"
          
          {
            echo "# üöÄ OpenWrt Firmware Release"
            echo ""
            echo "## üìã Build Information"
            echo ""
            echo "| Property | Value |"
            echo "|----------|-------|"
            echo "| üè∑Ô∏è Build Type | \`$BUILD_TYPE\` |"
            echo "| üìÖ Build Date | $(date '+%Y-%m-%d %H:%M:%S %Z') |"
            echo "| üéØ Trigger | ${{ github.event_name }} |"
            echo "| üîß Runner | Ubuntu 22.04 |"
            echo "| üì¶ Workflow | ${{ github.workflow }} |"
            echo ""
            echo "## üìÅ Firmware Versions"
            echo ""
            
            # Check available firmware versions
            cd "$ARTIFACT_DIR"
            
            if [ -f "${FIRMWARE_PREFIX}_$VERSION_LATEST.zip" ]; then
              latest_size=$(ls -lh "${FIRMWARE_PREFIX}_$VERSION_LATEST.zip" | awk '{print $5}')
              echo "- üÜï **${FIRMWARE_PREFIX}_$VERSION_LATEST.zip** (Latest) - $latest_size"
            fi
            
            if [ -f "${FIRMWARE_PREFIX}_$VERSION_PREVIOUS.zip" ]; then
              prev_size=$(ls -lh "${FIRMWARE_PREFIX}_$VERSION_PREVIOUS.zip" | awk '{print $5}')
              echo "- üì¶ **${FIRMWARE_PREFIX}_$VERSION_PREVIOUS.zip** (Previous) - $prev_size"
            fi
            
            if [ -f "${FIRMWARE_PREFIX}_$VERSION_OLDEST.zip" ]; then
              old_size=$(ls -lh "${FIRMWARE_PREFIX}_$VERSION_OLDEST.zip" | awk '{print $5}')
              echo "- üì¶ **${FIRMWARE_PREFIX}_$VERSION_OLDEST.zip** (Archive) - $old_size"
            fi
            
            echo ""
            echo "## üìä Repository Updates"
            echo ""
            
            cd "$GITHUB_WORKSPACE"
            
            # Function to process update records
            process_update_records() {
              local prefix="$1"
              local display_name="$2"
              local repo_url="$3"
              
              echo "### üîß $display_name"
              echo ""
              
              if [ -f "${prefix}_updates_001.txt" ]; then
                echo "#### üìù Latest Updates (${FIRMWARE_PREFIX}_$VERSION_LATEST)"
                echo ""
                
                # Skip header lines and process commit records
                while IFS= read -r line; do
                  if [[ $line == "ÁºñËØëÊó∂Èó¥:"* ]] || [[ $line == "ÁºñËØëÁ±ªÂûã:"* ]] || [[ $line == "‰ªìÂ∫ìÁ±ªÂûã:"* ]]; then
                    continue
                  elif [[ $line == "Êõ¥Êñ∞ÂÜÖÂÆπ:" ]]; then
                    echo "**Commit History:**"
                    echo ""
                  else
                    if [[ $line =~ ^[a-f0-9]{40}\|[a-f0-9]{7}\| ]]; then
                      IFS='|' read -r full_hash short_hash subject author timestamp <<< "$line"
                      if [ -n "$short_hash" ] && [ -n "$subject" ]; then
                        echo "- [\`$short_hash\`]($repo_url/commit/$full_hash) $subject - *$author*"
                      fi
                    fi
                  fi
                done < "${prefix}_updates_001.txt"
                echo ""
              else
                echo "*No update records available*"
                echo ""
              fi
            }
            
            # Process OP repository updates
            process_update_records "op" "OP Repository (coolsnowwolf/lede)" "$OP_URL"
            
            # Process QModem repository updates
            process_update_records "qmodem" "QModem Repository (FUjr/QModem)" "$QMODEM_URL"
            
            echo "## üíæ Installation Instructions"
            echo ""
            echo "1. **Download** the appropriate firmware file for your device"
            echo "2. **Backup** your current configuration if needed"
            echo "3. **Flash** the firmware using your preferred method:"
            echo "   - Web interface upgrade"
            echo "   - TFTP recovery"
            echo "   - Serial console"
            echo "4. **Configure** your device after first boot"
            echo ""
            echo "## ‚ö†Ô∏è Important Notes"
            echo ""
            echo "- This is a **development build** - use at your own risk"
            echo "- Always backup your current firmware before upgrading"
            echo "- Check device compatibility before flashing"
            echo "- Factory reset may be required when upgrading between major versions"
            echo ""
            echo "---"
            echo "*Automatically generated by GitHub Actions on $(date '+%Y-%m-%d %H:%M:%S %Z')*"
            
          } > "$RELEASE_NOTE_FILE"
          
          echo "‚úÖ Release notes generated successfully"
          echo "release_note=$RELEASE_NOTE_FILE" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"

      # ============================================================================
      # Upload Phase
      # ============================================================================
      - name: üì§ Upload Firmware Artifacts
        if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FIRMWARE_PREFIX }}_firmware_${{ env.BUILD_TYPE }}_$(date +%Y%m%d_%H%M%S)
          path: ${{ env.ARTIFACT_DIR }}/*.zip
          retention-days: 30
          compression-level: 0  # Files are already compressed

      - name: üéØ Create GitHub Release
        if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN || secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}_$(date +%Y%m%d_%H%M%S)
          name: üöÄ OpenWrt Firmware - $(date +%Y-%m-%d)
          body_path: ${{ steps.release_note.outputs.release_note }}
          files: ${{ env.ARTIFACT_DIR }}/*.zip
          draft: false
          prerelease: ${{ env.BUILD_TYPE == 'debug' }}

      # ============================================================================
      # Configuration Commit Phase
      # ============================================================================
      - name: üíæ Commit Configuration Updates
        if: always() && !cancelled()
        run: |
          echo "::group::üíæ Configuration Updates"
          
          # Setup git configuration
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions [Build Bot]"
          
          # Check out or create config branch
          if git rev-parse --verify origin/$CONFIG_BRANCH >/dev/null 2>&1; then
            git fetch origin $CONFIG_BRANCH
            git checkout $CONFIG_BRANCH
          else
            git checkout --orphan $CONFIG_BRANCH
            git rm -rf . 2>/dev/null || true
            echo "# Configuration Storage Branch" > README.md
            echo "This branch stores configuration files for the workflows." >> README.md
            git add README.md
            git commit -m "üéØ Initialize configuration storage branch"
          fi
          
          # Copy updated config files to config branch
          git checkout ${{ github.ref_name }}
          for file in op_updates_*.txt qmodem_updates_*.txt; do
            if [ -f "$file" ]; then
              cp "$file" /tmp/"$file"
            fi
          done
          
          git checkout $CONFIG_BRANCH
          for file in op_updates_*.txt qmodem_updates_*.txt; do
            if [ -f "/tmp/$file" ]; then
              cp "/tmp/$file" "$file"
            fi
          done
          
          # Add and commit configuration files
          git add *.txt
          
          if git diff --staged --quiet; then
            echo "üìù No configuration changes to commit"
          else
            echo "üìù Committing configuration updates..."
            
            # Create detailed commit message
            commit_msg="üèóÔ∏è Update build configuration records

            Build Information:
            - Type: $BUILD_TYPE
            - Trigger: ${{ github.event_name }}
            - Status: ${{ steps.build_status.outputs.status || 'unknown' }}
            - Date: $(date -Iseconds)
            
            Updated Files:
            $(git diff --staged --name-only | sed 's/^/- /')
            
            Auto-generated by: ${{ github.workflow }} #${{ github.run_number }}"
            
            git commit -m "$commit_msg"
            git push origin $CONFIG_BRANCH
            
            echo "‚úÖ Configuration updates committed and pushed to config branch"
          fi
          
          echo "::endgroup::"

      # ============================================================================
      # Cleanup and Summary Phase
      # ============================================================================
      - name: üßπ Cleanup and Maintenance
        if: always()
        run: |
          echo "::group::üßπ Cleanup Operations"
          
          # Clean up temporary directories
          echo "üóëÔ∏è Cleaning temporary files..."
          rm -rf /tmp/openwrt_* 2>/dev/null || true
          
          # Clean up old workflow runs (keep last 10)
          echo "üìä Workflow cleanup will be handled by retention settings"
          
          # Show final disk usage
          echo "üíø Final disk usage:"
          df -hT / | head -2
          
          echo "::endgroup::"

      - name: üìã Generate Build Summary
        if: always()
        run: |
          echo "# üèóÔ∏è OpenWrt Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build Status
          echo "## üìä Build Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.build_status.outputs.status }}" = "success" ]; then
            echo "### ‚úÖ Build Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The firmware has been compiled successfully and is ready for use." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The build process encountered errors. Please check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build Information
          echo "## üìã Build Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üè∑Ô∏è Build Type | $BUILD_TYPE |" >> $GITHUB_STEP_SUMMARY
          echo "| üìÖ Build Date | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
          echo "| üéØ Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîß Repository | ${{ github.repository }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üì¶ Workflow | ${{ github.workflow }} #${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Files Generated
          if [ "${{ steps.organize.outputs.status }}" = "success" ]; then
            echo "## üì¶ Generated Files" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The following firmware files have been generated:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            cd "$ARTIFACT_DIR" 2>/dev/null || cd .
            for zip_file in *.zip 2>/dev/null; do
              if [ -f "$zip_file" ]; then
                file_size=$(ls -lh "$zip_file" | awk '{print $5}')
                echo "- üìÅ \`$zip_file\` ($file_size)" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Next Steps
          echo "## üöÄ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$UPLOAD_RELEASE" = "true" ] && [ "${{ steps.organize.outputs.status }}" = "success" ]; then
            echo "1. üì• **Download** firmware from the release page" >> $GITHUB_STEP_SUMMARY
            echo "2. üîç **Verify** the firmware integrity" >> $GITHUB_STEP_SUMMARY
            echo "3. üì± **Flash** to your device following proper procedures" >> $GITHUB_STEP_SUMMARY
          elif [ "$UPLOAD_FIRMWARE" = "true" ] && [ "${{ steps.organize.outputs.status }}" = "success" ]; then
            echo "1. üì• **Download** firmware from the artifacts section" >> $GITHUB_STEP_SUMMARY
            echo "2. üîç **Verify** the firmware integrity" >> $GITHUB_STEP_SUMMARY
            echo "3. üì± **Flash** to your device following proper procedures" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Build completed without uploads enabled" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Build completed at $(date '+%Y-%m-%d %H:%M:%S %Z')*" >> $GITHUB_STEP_SUMMARY
