name: üîç Repository Update Checker

# ================================================================================
# Trigger Configuration
# ================================================================================
on:
  workflow_dispatch:
    inputs:
      force_build:
        description: 'üöÄ Force trigger build even without updates'
        required: false
        default: 'false'
        type: boolean
      check_repo:
        description: 'üìÇ Repository to check (all/op/qmodem)'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - op
        - qmodem
  schedule:
    - cron: '0 */12 * * *'  # Every 12 hours

# ================================================================================
# Jobs Configuration
# ================================================================================
jobs:
  update_checker:
    name: üîç Repository Update Detection
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      has_updates: ${{ steps.check_updates.outputs.has_updates }}
      op_updated: ${{ steps.check_updates.outputs.op_updated }}
      qmodem_updated: ${{ steps.check_updates.outputs.qmodem_updated }}
    
    steps:
      # ============================================================================
      # Preparation Phase
      # ============================================================================
      - name: üöÄ Initialize Workspace
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}

      - name: üõ†Ô∏è Load Configuration & Setup Environment
        run: |
          echo "::group::üîß Configuration Loading"
          
          # Load configuration from config.env
          if [ -f ".github/workflows/config.env" ]; then
            echo "üìã Loading configuration from config.env..."
            # Source the config file and export all variables
            while IFS='=' read -r key value; do
              # Skip comments and empty lines
              [[ $key =~ ^[[:space:]]*# ]] && continue
              [[ -z $key ]] && continue
              # Remove quotes from value and export
              value=$(echo "$value" | sed 's/^"\(.*\)"$/\1/')
              export "$key=$value"
              echo "$key=$value" >> $GITHUB_ENV
            done < .github/workflows/config.env
            echo "‚úÖ Configuration loaded successfully"
          else
            echo "‚ùå Configuration file not found!"
            exit 1
          fi
          
          # Setup Git configuration for commits
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions Bot"
          
          # Create and checkout config branch if it doesn't exist
          # First, stash any local changes to avoid conflicts
          if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "üíæ Stashing local changes to avoid conflicts..."
            git stash push -m "Auto-stash before config branch checkout"
          fi
          
          # Clean up any untracked files that might conflict
          echo "üßπ Cleaning up potential conflicting files..."
          rm -f op_updates_*.txt qmodem_updates_*.txt *_last_commit.txt 2>/dev/null || true
          
          if git rev-parse --verify origin/$CONFIG_BRANCH >/dev/null 2>&1; then
            echo "üìÇ Config branch exists, checking out..."
            git fetch origin $CONFIG_BRANCH
            git checkout $CONFIG_BRANCH
          else
            echo "üÜï Creating new config branch..."
            git checkout --orphan $CONFIG_BRANCH
            git rm -rf . 2>/dev/null || true
            echo "# Configuration Storage Branch" > README.md
            echo "This branch stores configuration files for the workflows." >> README.md
            git add README.md
            git commit -m "üéØ Initialize configuration storage branch"
            git push origin $CONFIG_BRANCH
          fi
          
          # Display environment info
          echo "üìÖ Check Time: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "üîß Runner: $(uname -a)"
          echo "üìÇ Working Directory: $(pwd)"
          echo "üåø Current Branch: $(git branch --show-current)"
          echo "üéØ Check Target: ${{ github.event.inputs.check_repo || 'all' }}"
          echo "üöÄ Force Build: ${{ github.event.inputs.force_build || 'false' }}"
          
          echo "::endgroup::"

      # ============================================================================
      # Update Checking Phase
      # ============================================================================
      - name: üîç Check Repository Updates
        id: check_updates
        run: |
          set -e
          
          echo "::group::üîç Repository Update Detection"
          
          # Initialize variables
          has_op_updates=false
          has_qmodem_updates=false
          check_target="${{ github.event.inputs.check_repo || 'all' }}"
          force_build="${{ github.event.inputs.force_build || 'false' }}"
          current_time=$(date '+%Y-%m-%d %H:%M:%S %Z')
          
          # Function to check OP repository updates
          check_op_updates() {
            echo "::group::üì¶ OP Repository ($OP_DISPLAY_NAME) Check"
            
            if git clone --depth 50 "$OP_URL" -b "$OP_BRANCH" temp_op 2>/dev/null; then
              cd temp_op
              
              # Get current commit information
              current_commit=$(git rev-parse HEAD)
              short_commit=$(git rev-parse --short HEAD)
              commit_author=$(git log -1 --format='%an')
              commit_date=$(git log -1 --format='%ci')
              commit_message=$(git log -1 --format='%s')
              
              echo "üìå Current Commit: ${current_commit}"
              echo "‚úèÔ∏è  Message: ${commit_message}"
              echo "üë§ Author: ${commit_author}"
              echo "üìÖ Date: ${commit_date}"
              
              cd ..
              
              # Read last tracked commit
              if [ -f "$OP_LAST_COMMIT_FILE" ]; then
                last_commit=$(grep -v '^#' "$OP_LAST_COMMIT_FILE" | head -1 | tr -d '[:space:]')
                echo "üìã Last Tracked: ${last_commit:-'none'}"
                
                if [ -n "$last_commit" ] && [ "$last_commit" != "$current_commit" ]; then
                  echo "üÜï New updates detected for OP repository!"
                  has_op_updates=true
                elif [ -z "$last_commit" ]; then
                  echo "üÜï First time checking OP repository"
                  has_op_updates=true
                else
                  echo "‚úÖ OP repository is up to date"
                fi
              else
                echo "üÜï Configuration file not found - first time check"
                has_op_updates=true
              fi
              
              # Store current commit info
              {
                echo "# OP Repository Last Tracked Commit"
                echo "# This file stores the last successfully checked commit hash for $OP_URL"
                echo "# Last Updated: ${current_time}"
                echo "${current_commit}"
              } > "$OP_LAST_COMMIT_FILE"
              
              rm -rf temp_op
            else
              echo "‚ö†Ô∏è Failed to clone OP repository - network or access issue"
              has_op_updates=false
            fi
            
            echo "::endgroup::"
          }
          
          # Function to check QModem repository updates  
          check_qmodem_updates() {
            echo "::group::üì± QModem Repository ($QMODEM_DISPLAY_NAME) Check"
            
            if git clone --depth 50 "$QMODEM_URL" -b "$QMODEM_BRANCH" temp_qmodem 2>/dev/null; then
              cd temp_qmodem
              
              # Get current commit information
              current_commit=$(git rev-parse HEAD)
              short_commit=$(git rev-parse --short HEAD)
              commit_author=$(git log -1 --format='%an')
              commit_date=$(git log -1 --format='%ci')
              commit_message=$(git log -1 --format='%s')
              
              echo "üìå Current Commit: ${current_commit}"
              echo "‚úèÔ∏è  Message: ${commit_message}"
              echo "üë§ Author: ${commit_author}"
              echo "üìÖ Date: ${commit_date}"
              
              cd ..
              
              # Read last tracked commit
              if [ -f "$QMODEM_LAST_COMMIT_FILE" ]; then
                last_commit=$(grep -v '^#' "$QMODEM_LAST_COMMIT_FILE" | head -1 | tr -d '[:space:]')
                echo "üìã Last Tracked: ${last_commit:-'none'}"
                
                if [ -n "$last_commit" ] && [ "$last_commit" != "$current_commit" ]; then
                  echo "üÜï New updates detected for QModem repository!"
                  has_qmodem_updates=true
                elif [ -z "$last_commit" ]; then
                  echo "üÜï First time checking QModem repository"
                  has_qmodem_updates=true
                else
                  echo "‚úÖ QModem repository is up to date"
                fi
              else
                echo "üÜï Configuration file not found - first time check"
                has_qmodem_updates=true
              fi
              
              # Store current commit info
              {
                echo "# QModem Repository Last Tracked Commit"
                echo "# This file stores the last successfully checked commit hash for $QMODEM_URL"
                echo "# Last Updated: ${current_time}"
                echo "${current_commit}"
              } > "$QMODEM_LAST_COMMIT_FILE"
              
              rm -rf temp_qmodem
            else
              echo "‚ö†Ô∏è Failed to clone QModem repository - network or access issue"
              has_qmodem_updates=false
            fi
            
            echo "::endgroup::"
          }
          
          # Execute checks based on target
          case "$check_target" in
            "op")
              echo "üéØ Checking OP repository only"
              check_op_updates
              ;;
            "qmodem")
              echo "üéØ Checking QModem repository only"
              check_qmodem_updates
              ;;
            "all"|*)
              echo "üéØ Checking all repositories"
              check_op_updates
              check_qmodem_updates
              ;;
          esac
          
          # Determine if build should be triggered
          should_build=false
          if [ "$force_build" = "true" ]; then
            echo "üöÄ Force build requested"
            should_build=true
          elif [ "$has_op_updates" = "true" ] || [ "$has_qmodem_updates" = "true" ]; then
            echo "üÜï Updates detected - build required"
            should_build=true
          else
            echo "‚úÖ No updates found - build not required"
          fi
          
          # Set outputs
          echo "has_updates=${should_build}" >> $GITHUB_OUTPUT
          echo "op_updated=${has_op_updates}" >> $GITHUB_OUTPUT
          echo "qmodem_updated=${has_qmodem_updates}" >> $GITHUB_OUTPUT
          
          # Display final summary
          echo ""
          echo "üìä Summary:"
          echo "  ‚Ä¢ OP Updates: ${has_op_updates}"
          echo "  ‚Ä¢ QModem Updates: ${has_qmodem_updates}"
          echo "  ‚Ä¢ Should Build: ${should_build}"
          echo "  ‚Ä¢ Force Build: ${force_build}"
          
          echo "::endgroup::"

      # ============================================================================
      # Build Triggering Phase
      # ============================================================================
      - name: üöÄ Trigger Build Workflow
        if: steps.check_updates.outputs.has_updates == 'true'
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          echo "::group::üöÄ Build Workflow Trigger"
          
          echo "üì§ Triggering OpenWrt build workflow..."
          echo "  ‚Ä¢ OP Updated: ${{ steps.check_updates.outputs.op_updated }}"
          echo "  ‚Ä¢ QModem Updated: ${{ steps.check_updates.outputs.qmodem_updated }}"
          
          # Try GitHub CLI first
          if command -v gh >/dev/null 2>&1; then
            echo "üîß Using GitHub CLI..."
            if gh workflow run openwrt-builder.yml \
               --field event_type="Source-Code-Update" \
               --field op_updated="${{ steps.check_updates.outputs.op_updated }}" \
               --field qmodem_updated="${{ steps.check_updates.outputs.qmodem_updated }}"; then
              echo "‚úÖ Successfully triggered build via GitHub CLI"
            else
              echo "‚ö†Ô∏è GitHub CLI failed, trying API..."
              use_api=true
            fi
          else
            echo "üîß GitHub CLI not available, using API..."
            use_api=true
          fi
          
          # Fallback to API if needed
          if [ "${use_api:-false}" = "true" ]; then
            response=$(curl -s -w "\n%{http_code}" -X POST \
              "https://api.github.com/repos/${{ github.repository }}/dispatches" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "event_type": "Source-Code-Update",
                "client_payload": {
                  "op_updated": "${{ steps.check_updates.outputs.op_updated }}",
                  "qmodem_updated": "${{ steps.check_updates.outputs.qmodem_updated }}",
                  "trigger_time": "'$(date -Iseconds)'",
                  "triggered_by": "update-checker"
                }
              }')
            
            http_code=$(echo "$response" | tail -n1)
            if [ "$http_code" = "204" ]; then
              echo "‚úÖ Successfully triggered build via API"
            else
              echo "‚ùå Failed to trigger build workflow"
              echo "HTTP Code: $http_code"
              echo "Response: $(echo "$response" | head -n -1)"
              exit 1
            fi
          fi
          
          echo "::endgroup::"

      # ============================================================================
      # Configuration Commit Phase
      # ============================================================================
      - name: üíæ Commit Configuration Updates
        if: always() && !cancelled()
        run: |
          echo "::group::üíæ Configuration File Updates"
          
          # Clean up any conflicting files first
          echo "üßπ Cleaning up conflicting files..."
          rm -f op_updates_*.txt qmodem_updates_*.txt *_last_commit.txt 2>/dev/null || true
          
          # Stash any uncommitted changes
          if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "üíæ Stashing uncommitted changes..."
            git stash push -m "Auto-stash before config branch operations"
          fi
          
          # Make sure we're on the config branch
          if git rev-parse --verify origin/$CONFIG_BRANCH >/dev/null 2>&1; then
            git fetch origin $CONFIG_BRANCH
            git checkout $CONFIG_BRANCH 2>/dev/null || git checkout -b $CONFIG_BRANCH
          else
            git checkout --orphan $CONFIG_BRANCH
            git rm -rf . 2>/dev/null || true
            echo "# Configuration Storage Branch" > README.md
            echo "This branch stores configuration files for the workflows." >> README.md
            git add README.md
            git commit -m "üéØ Initialize configuration storage branch"
          fi
          
          # Check if there are any changes to commit
          git add . 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "üìù No configuration changes to commit"
          else
            echo "üìù Committing configuration updates..."
            
            # Create detailed commit message
            commit_msg="üîç Update repository tracking configuration
            
            Updated by: Update Checker Workflow
            Timestamp: $(date -Iseconds)
            Trigger: ${{ github.event_name }}
            
            Changes:
            - Updated last commit tracking files
            - Refreshed repository status records
            "
            
            git commit -m "$commit_msg"
            git push origin $CONFIG_BRANCH
            
            echo "‚úÖ Configuration updates committed and pushed to config branch"
          fi
          
          echo "::endgroup::"

      # ============================================================================
      # Cleanup and Maintenance Phase  
      # ============================================================================
      - name: üßπ Cleanup Old Workflow Runs
        if: always()
        uses: Mattraks/delete-workflow-runs@v2
        continue-on-error: true
        with:
          token: ${{ secrets.TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 5

      # ============================================================================
      # Summary Generation Phase
      # ============================================================================
      - name: üìä Generate Workflow Summary
        if: always()
        run: |
          echo "# üîç Repository Update Checker Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Status Overview
          echo "## üìã Check Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üïê Check Time | $(date '+%Y-%m-%d %H:%M:%S %Z') |" >> $GITHUB_STEP_SUMMARY
          echo "| üéØ Target | ${{ github.event.inputs.check_repo || 'all' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üöÄ Force Build | ${{ github.event.inputs.force_build || 'false' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üèÉ Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Repository Status
          echo "## üì¶ Repository Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Repository | Status | Updates | Config File |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|---------|-------------|" >> $GITHUB_STEP_SUMMARY
          
          # OP Repository Status
          if [ -f "$OP_LAST_COMMIT_FILE" ]; then
            op_status="‚úÖ Tracked"
            op_config="üìÑ Present"
          else
            op_status="‚ö†Ô∏è Not Tracked"
            op_config="‚ùå Missing"
          fi
          echo "| üîß OP ($OP_DISPLAY_NAME) | $op_status | ${{ steps.check_updates.outputs.op_updated || 'N/A' }} | $op_config |" >> $GITHUB_STEP_SUMMARY
          
          # QModem Repository Status  
          if [ -f "$QMODEM_LAST_COMMIT_FILE" ]; then
            qmodem_status="‚úÖ Tracked"
            qmodem_config="üìÑ Present"
          else
            qmodem_status="‚ö†Ô∏è Not Tracked"
            qmodem_config="‚ùå Missing"
          fi
          echo "| üì± QModem ($QMODEM_DISPLAY_NAME) | $qmodem_status | ${{ steps.check_updates.outputs.qmodem_updated || 'N/A' }} | $qmodem_config |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Results
          echo "## üéØ Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_updates.outputs.has_updates }}" = "true" ]; then
            echo "### ‚úÖ Build Triggered" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The build workflow has been triggered due to detected updates or manual request." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Update Details:**" >> $GITHUB_STEP_SUMMARY
            echo "- OP Repository: ${{ steps.check_updates.outputs.op_updated || 'No change' }}" >> $GITHUB_STEP_SUMMARY  
            echo "- QModem Repository: ${{ steps.check_updates.outputs.qmodem_updated || 'No change' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ÑπÔ∏è No Build Required" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No repository updates detected and no manual build requested." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Automated check completed at $(date '+%Y-%m-%d %H:%M:%S %Z')*" >> $GITHUB_STEP_SUMMARY
