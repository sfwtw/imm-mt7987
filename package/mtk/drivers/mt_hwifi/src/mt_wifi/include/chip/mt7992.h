#ifndef __MT7992_H__
#define __MT7992_H__

struct _RTMP_ADAPTER;
struct _RTMP_CHIP_DBG;

#define MT7992_BIN_FILE_NAME_E1 "WIFI_RAM_CODE_MT7992.bin"
#define MT7992_BIN_FILE_NAME_E2 "WIFI_RAM_CODE_MT7992.bin"
#define MT7992_WA_BIN_FILE_NAME "MT7992_WACPU_RAM_CODE_release.bin"
#define MT7992_ROM_PATCH_BIN_FILE_NAME_E1 "mt7992_patch_e1_hdr.bin"
#define MT7992_ROM_PATCH_BIN_FILE_NAME_E2 "mt7992_patch_e2_hdr.bin"

#define MT7992_EEPROM_7200_7975_7979_FILE_PATH "/lib/firmware/MT7992_MT7975_MT7979_EEPROM_BE7200_iPAiLNA.bin"
#define MT7992_EEPROM_6500_7978_7979_FILE_PATH "/lib/firmware/MT7992_MT7978_MT7979_EEPROM_BE6500_iPAiLNA.bin"
#define MT7992_EEPROM_7200_7976G_7977_FILE_PATH "/lib/firmware/MT7992_MT7976_MT7977_EEPROM_BE7200_ePAeLNA_midFEM.bin"
#define MT7992_EEPROM_7200_7975_7977_FILE_PATH "/lib/firmware/MT7992_MT7975_MT7977_EEPROM_BE7200_2i5e_sky_nonlinear.bin"
#define MT7992_EEPROM_5040_7976C_FILE_PATH "/lib/firmware/MT7991_MT7976_EEPROM_BE5040_iPAiLNA.bin"
#define MT7992_EEPROM_5040_7976DA_FILE_PATH "/lib/firmware/MT7991_MT7976_EEPROM_BE5040_ePAeLNA.bin"
#define MT7992_EEPROM_DEFAULT_FILE_PATH "/lib/firmware/MT7992_EEPROM.bin"

#define MT7992_SKU_INVALID			0x0
#define MT7992_SKU_BE7200_MT7975_MT7979		0x1
#define MT7992_SKU_BE6500_MT7978_MT7979		0x2
#define MT7992_SKU_BE7200_MT7976G_MT7977	0x4
#define MT7992_SKU_BE7200_MT7975_MT7977		0x5
#define MT7992_SKU_BE5040_MT7976C		0x6
#define MT7992_SKU_BE5040_MT7976DA		0x8

#define MT7992_CBTOP_GPIO_ADIE_STRAP_ADDR	0x700056F0
#define MT7992_CBTOP_GPIO_ADIE_NUM_STRAP_MASK	BIT(15)
#define MT7992_CBTOP_GPIO_ADIE_NUM_STRAP_SHIF	15
#define MT7992_CBTOP_GPIO_ADIE_COMBATION_STRAP_MASK	BITS(16, 17)
#define MT7992_CBTOP_GPIO_ADIE_COMBATION_STRAP_SHIF	16

#define MT7992_ADIE_MULTI			0x0
#define MT7992_ADIE_SINGLE			0x1

#define MT7992_ADIE_78_79			0x00
#define MT7992_ADIE_75_7779			0x01
#define MT7992_ADIE_76_77			0x02

#define CHIP_ID_OFFSET	0x2C

#define ADIE0_RFIDX		0xF
#define ADIE1_RFIDX		0x1F
#define ADIE1_CHIP_ID_MASK	BITS(16, 31)

#define MT7976C_CHIP_ID		0x79768A10
#define MT7976C_HL_CHIP_ID	0x79768B00
#define MT7976C_PS_CHIP_ID	0x79768C10

#define MT7979_CHIP_ID		0x79790000

#define MT7992_ADIE0_OFFSET		0x400
#define MT7992_ADIE1_OFFSET		0x1200

#define MT7992_ROM_PATCH_START_ADDRESS	0x00200000

#ifdef MEMORY_SLIM
#define MAX_STA_NUM				256
#define MAX_BSS_NUM				16
#define MT7992_MT_WTBL_SIZE    (MAX_STA_NUM + MAX_BSS_NUM + 1)
#else /* !MEMORY_SLIM */
#define MT7992_MT_WTBL_SIZE    544
#endif /* MEMORY_SLIM */

#define CFG_STA_REC_NUM	MT7992_MT_WTBL_SIZE
#define MAX_LEN_OF_MAC_TABLE	MT7992_MT_WTBL_SIZE

#define MAX_INBAND_WTBL_NUM         20


#define WTBL_MASK_UPDATE_MAX_RETRY	64000

#define EEPROM_BAND0_MAC0	0x04
#define EEPROM_BAND0_MAC1	0x06
#define EEPROM_BAND0_MAC2	0x08

#define EEPROM_BAND1_MAC0	0x0A
#define EEPROM_BAND1_MAC1	0x0C
#define EEPROM_BAND1_MAC2	0x0E

#define EEPROM_BAND2_MAC0	0x2C0
#define EEPROM_BAND2_MAC1	0x2C2
#define EEPROM_BAND2_MAC2	0x2C4

#define EEPROM_ANTENNA_CFG_OFFSET           0x190
#define BAND_SELECT_MASK_B0					BITS(0, 2)
#define BAND_SELECT_OFFSET_B0               0
#define BAND_SELECT_MASK_B1					BITS(3, 5)
#define BAND_SELECT_OFFSET_B1               3

#define EEPROM_ANTENNA_CFG_OFFSET_1         0x191
#define BAND_SELECT_MASK_B2					BITS(0, 2)
#define BAND_SELECT_OFFSET_B2               0
#define TX_MASK_B0							BITS(3, 5)
#define TX_OFFSET_B0						3

#define EEPROM_ANTENNA_CFG_OFFSET_2         0x192
#define TX_MASK_B1							BITS(0, 2)
#define TX_OFFSET_B1						0
#define TX_MASK_B2							BITS(3, 5)
#define TX_OFFSET_B2						3

#define EEPROM_ANTENNA_CFG_OFFSET_3         0x193
#define RX_MASK_B0							BITS(0, 2)
#define RX_OFFSET_B0						0
#define RX_MASK_B1							BITS(3, 5)
#define RX_OFFSET_B1						3

#define EEPROM_ANTENNA_CFG_OFFSET_4         0x194
#define RX_MASK_B2							BITS(0, 2)
#define RX_OFFSET_B2						0
#define STREAM_MASK_B0						BITS(3, 5)
#define STREAM_OFFSET_B0					3

#define EEPROM_ANTENNA_CFG_OFFSET_5         0x195
#define STREAM_MASK_B1						BITS(0, 2)
#define STREAM_OFFSET_B1					0
#define STREAM_MASK_B2						BITS(3, 5)
#define STREAM_OFFSET_B2					3

/* rxv dara word */
#define E1_RXV_PACKET_HEADER_DW_NUM    2
#define E1_RXV_ENTRY_HEADER_DW_NUM    2
#define E1_CMN_RXV1_DW_NUM    18
#define E1_CMN_RXV2_DW_NUM    20
#define E1_USR_RXV1_DW_NUM    2
#define E1_USR_RXV2_DW_NUM    4
#define E2_RXV_PACKET_HEADER_DW_NUM    2
#define E2_RXV_ENTRY_HEADER_DW_NUM    2
#define E2_CMN_RXV1_DW_NUM    18
#define E2_CMN_RXV2_DW_NUM    26
#define E2_USR_RXV1_DW_NUM    2
#define E2_USR_RXV2_DW_NUM    4

#ifdef DATA_TXPWR_CTRL
#define DATA_TXPOWER_MAX_BW_NUM         5
#define DATA_TXPOWER_MAX_MCS_NUM        16
#endif

/* rxv double data word low/high cycle */
#define RXV_DDW0_L     0
#define RXV_DDW0_H     1
#define RXV_DDW1_L     2
#define RXV_DDW1_H     3
#define RXV_DDW2_L     4
#define RXV_DDW2_H     5
#define RXV_DDW3_L     6
#define RXV_DDW3_H     7
#define RXV_DDW4_L     8
#define RXV_DDW4_H     9
#define RXV_DDW5_L     10
#define RXV_DDW5_H     11
#define RXV_DDW6_L     12
#define RXV_DDW6_H     13
#define RXV_DDW7_L     14
#define RXV_DDW7_H     15
#define RXV_DDW8_L     16
#define RXV_DDW8_H     17
#define RXV_DDW9_L     18
#define RXV_DDW9_H     19
#define RXV_DDW10_L    20
#define RXV_DDW10_H    21

#define MUM_VHT_4MU_GRP_NUM 5

#define TSSI_CAL_2G_SIZE  (9 * 4)
#define TSSI_CAL_5G_SIZE  (48 * 4)
#define DNL_CAL_SIZE      (158 * 4)

#define TSSI_CAL_2G_EEPROM_OFST  0x308
#define TSSI_CAL_5G_EEPROM_OFST  0x380
#define TX_DNL_CAL_EEPROM_OFST   0xAFC
#define RX_GAIN_CAL_EEPROM_OFST  0x1830
#define RX_GAIN_CAL_EERPOM_6G_WF0_GP10_WF1_GP_13_OFSET (0x19DF - 0x1970)
#define RX_GAIN_CAL_EERPOM_6G_WF1_GP14_WF3_GP_13_OFSET (0x1AAF - 0x1A00)
#define RX_GAIN_CAL_EERPOM_IDLE_OFSET (0x19FF - 0x19E0)

/* RF LOCKDOWN */
#define COUNTRY_CODE_BYTE0_EEPROME_OFFSET   0x5C
#define COUNTRY_CODE_BYTE1_EEPROME_OFFSET   0x5D
#define COUNTRY_REGION_2G_EEPROME_OFFSET    0x5E
#define COUNTRY_REGION_5G_EEPROME_OFFSET    0x5F
#define COUNTRY_REGION_VALIDATION_MASK      BIT(7)
#define COUNTRY_REGION_VALIDATION_OFFSET    7
#define COUNTRY_REGION_CONTENT_MASK         BITS(0, 6)
#define RF_LOCKDOWN_EEPROME_BLOCK_OFFSET    0x50
#define RF_LOCKDOWN_EEPROME_COLUMN_OFFSET   0xB
#define RF_LOCKDOWN_EEPROME_OFFSET          0x5B
#define RF_LOCKDOWN_EEPROME_MASK            BIT(7)
#define RF_LOCKDOWN_EEPROME_SHIFT           7
#define RF_LOCKDOWN_EEPROME_SKU_TBL_OFFSET  0x5B
#define RF_LOCKDOWN_EEPROME_SKU_TBL_MASK    BITS(0, 6)
#define RF_LOCKDOWN_EEPROME_SKU_TBL_SHIFT   0
#define RF_VALIDATION_NUMBER                10

extern const UINT8 SINGLE_SKU_PARSE_TABLE_LENGTH[SINGLE_SKU_TYPE_PARSE_NUM_V1];

extern const UINT8 BACKOFF_TABLE_BF_LENGTH[BACKOFF_TYPE_PARSE_NUM_V1];
extern const UINT8 BACKOFF_FILL_TABLE_BF_LENGTH[BACKOFF_PARAM_NUM_V1];

/** Tx Power Rate Column Offset */
#define TXPOWER_RATE_CCK_OFFSET     (0)
#define TXPOWER_RATE_OFDM_OFFSET    (TXPOWER_RATE_CCK_OFFSET  + MODULATION_SYSTEM_CCK_NUM)
#define TXPOWER_RATE_HT20_OFFSET    (TXPOWER_RATE_OFDM_OFFSET + MODULATION_SYSTEM_OFDM_NUM)
#define TXPOWER_RATE_HT40_OFFSET    (TXPOWER_RATE_HT20_OFFSET + MODULATION_SYSTEM_HT20_NUM)
#define TXPOWER_RATE_VHT20_OFFSET   (TXPOWER_RATE_HT40_OFFSET + MODULATION_SYSTEM_HT40_NUM)
#define TXPOWER_RATE_VHT40_OFFSET   (TXPOWER_RATE_VHT20_OFFSET + MODULATION_SYSTEM_VHT20_NUM)
#define TXPOWER_RATE_VHT80_OFFSET   (TXPOWER_RATE_VHT40_OFFSET + MODULATION_SYSTEM_VHT40_NUM)
#define TXPOWER_RATE_VHT160_OFFSET  (TXPOWER_RATE_VHT80_OFFSET + MODULATION_SYSTEM_VHT80_NUM)
#define TXPOWER_RATE_LEG_RATE_NUM   (TXPOWER_RATE_VHT160_OFFSET + MODULATION_SYSTEM_VHT160_NUM)
#define TXPOWER_RATE_HE26_OFFSET    (TXPOWER_RATE_LEG_RATE_NUM)
#define TXPOWER_RATE_HE52_OFFSET    (TXPOWER_RATE_HE26_OFFSET + MODULATION_SYSTEM_HE26_NUM)
#define TXPOWER_RATE_HE106_OFFSET   (TXPOWER_RATE_HE52_OFFSET + MODULATION_SYSTEM_HE52_NUM)
#define TXPOWER_RATE_HE242_OFFSET   (TXPOWER_RATE_HE106_OFFSET + MODULATION_SYSTEM_HE106_NUM)
#define TXPOWER_RATE_HE484_OFFSET   (TXPOWER_RATE_HE242_OFFSET + MODULATION_SYSTEM_HE242_NUM)
#define TXPOWER_RATE_HE996_OFFSET   (TXPOWER_RATE_HE484_OFFSET + MODULATION_SYSTEM_HE484_NUM)
#define TXPOWER_RATE_HE996X2_OFFSET (TXPOWER_RATE_HE996_OFFSET + MODULATION_SYSTEM_HE996_NUM)
#define TXPOWER_RATE_HE_NUM         (TXPOWER_RATE_HE996X2_OFFSET + MODULATION_SYSTEM_HE996X2_NUM)
#define TXPOWER_RATE_EHT26_OFFSET   (TXPOWER_RATE_HE_NUM)
#define TXPOWER_RATE_EHT52_OFFSET   (TXPOWER_RATE_EHT26_OFFSET + MODULATION_SYSTEM_EHT26_NUM)
#define TXPOWER_RATE_EHT106_OFFSET  (TXPOWER_RATE_EHT52_OFFSET + MODULATION_SYSTEM_EHT52_NUM)
#define TXPOWER_RATE_EHT242_OFFSET  (TXPOWER_RATE_EHT106_OFFSET + MODULATION_SYSTEM_EHT106_NUM)
#define TXPOWER_RATE_EHT484_OFFSET  (TXPOWER_RATE_EHT242_OFFSET + MODULATION_SYSTEM_EHT242_NUM)
#define TXPOWER_RATE_EHT996_OFFSET  (TXPOWER_RATE_EHT484_OFFSET + MODULATION_SYSTEM_EHT484_NUM)
#define TXPOWER_RATE_EHT996X2_OFFSET        (TXPOWER_RATE_EHT996_OFFSET + MODULATION_SYSTEM_EHT996_NUM)
#define TXPOWER_RATE_EHT996X4_OFFSET        (TXPOWER_RATE_EHT996X2_OFFSET + MODULATION_SYSTEM_EHT996X2_NUM)
#define TXPOWER_RATE_EHT26_52_OFFSET        (TXPOWER_RATE_EHT996X4_OFFSET + MODULATION_SYSTEM_EHT996X4_NUM)
#define TXPOWER_RATE_EHT26_106_OFFSET       (TXPOWER_RATE_EHT26_52_OFFSET + MODULATION_SYSTEM_EHT26_52_NUM)
#define TXPOWER_RATE_EHT484_242_OFFSET      (TXPOWER_RATE_EHT26_106_OFFSET + MODULATION_SYSTEM_EHT26_106_NUM)
#define TXPOWER_RATE_EHT996_484_OFFSET      (TXPOWER_RATE_EHT484_242_OFFSET + MODULATION_SYSTEM_EHT484_242_NUM)
#define TXPOWER_RATE_EHT996_484_242_OFFSET  (TXPOWER_RATE_EHT996_484_OFFSET + MODULATION_SYSTEM_EHT996_484_NUM)
#define TXPOWER_RATE_EHT996X2_484_OFFSET    (TXPOWER_RATE_EHT996_484_242_OFFSET + MODULATION_SYSTEM_EHT996_484_242_NUM)
#define TXPOWER_RATE_EHT996X3_OFFSET        (TXPOWER_RATE_EHT996X2_484_OFFSET + MODULATION_SYSTEM_EHT996X2_484_NUM)
#define TXPOWER_RATE_EHT996X3_484_OFFSET    (TXPOWER_RATE_EHT996X3_OFFSET + MODULATION_SYSTEM_EHT996X3_NUM)
#define TXPOWER_RATE_EHT_NUM                (TXPOWER_RATE_EHT996X3_484_OFFSET + MODULATION_SYSTEM_EHT996X3_484_NUM)
#define TXPOWER_RATE_NUM                    (TXPOWER_RATE_EHT_NUM)

/*
 * Used for DNL + TSSI Calibration happen in MP-Line state
 * 3 Channel for G-band L/M/H channel
 * 16 Channel for A-band L/H channel
 */
extern UINT16 MT7992_DNL_CAL_GBAND_BW20_FREQ[];
extern UINT16 MT7992_DNL_CAL_ABAND_BW20_FREQ[];
extern UINT16 MT7992_DNL_CAL_BW20_FREQ[];

extern UINT16 MT7992_DNL_CAL_GBAND_BW20_CH[];
extern UINT16 MT7992_DNL_CAL_ABAND_BW20_CH[];
extern UINT16 MT7992_DNL_CAL_BW20_CH[];

extern UINT16 MT7992_DNL_CAL_GBAND_BW20_SIZE;
extern UINT16 MT7992_DNL_CAL_ABAND_BW20_SIZE;
extern UINT16 MT7992_DNL_CAL_BW20_FREQ_SIZE;

extern UINT16 MT7992_DNL_CAL_GBAND_BW20_CH_SIZE;
extern UINT16 MT7992_DNL_CAL_ABAND_BW20_CH_SIZE;
extern UINT16 MT7992_DNL_CAL_B20_CH_SIZE;

void mt7992_init(struct _RTMP_ADAPTER *pAd);
VOID mt7992_chip_dbg_init(struct _RTMP_CHIP_DBG *dbg_ops);
INT mt7992AsicArchOpsInit(struct _RTMP_ADAPTER *pAd);

VOID mt7992_init_default(void *ph_dev_obj);
#ifdef PRE_CAL_MT7992_SUPPORT

enum {
    GBAND = 0,
    ABAND = 1,
};

#define PRECAL_INDICATION_BYTE 0x1A5
enum PRECAL_INDICATION_BIT_OFFSET {
	GROUP_PRECAL_INDN_BIT = 0,
	GROUP5G_PRECAL_INDN_BIT,
	GROUP6G_PRECAL_INDN_BIT,
	DPD2G_PRECAL_INDN_BIT,
	DPD5G_PRECAL_INDN_BIT,
	DPD6G_PRECAL_INDN_BIT
};

#ifdef RTMP_FLASH_SUPPORT

#define CAL_PRE_CAL_SIZE_OFFSET  0x1E00	 /*  7.5*1024 = 0x1E00 */
#define CAL_FLASH_OFFSET         0x1E10  /* 7.5*1024 + 16 = 0x1E10 */
#else
#define CAL_FLASH_OFFSET         0
#endif

/* Length limitation from Host to Firmware */
#define PRE_CAL_SET_MAX_CR_NUM   256
#define PRE_CAL_SET_MAX_LENGTH   (PRE_CAL_SET_MAX_CR_NUM * 4)

extern UINT16 MT7992_PER_CH_A5_BW20_BW80_BW160_FREQ[];
extern UINT16 MT7992_PER_CH_A5_BW20_BW80_BW160[];
extern UINT16 MT7992_PER_CH_A6_BW20_BW80_BW160_FREQ[];
extern UINT16 MT7992_PER_CH_A6_BW20_BW80_BW160[];
extern UINT16 MT7992_PER_CH_G_BW20_FREQ[];
extern UINT16 MT7992_PER_CH_G_BW20[];

extern UINT16 MT7992_PER_CH_A5_BW20_BW80_BW160_FREQ_SIZE;
extern UINT16 MT7992_PER_CH_A6_BW20_BW80_BW160_FREQ_SIZE;
extern UINT16 MT7992_PER_CH_G_BW20_FREQ_SIZE;
extern UINT16 MT7992_PER_CH_A5_BW20_BW80_BW160_SIZE;
extern UINT16 MT7992_PER_CH_A6_BW20_BW80_BW160_SIZE;
extern UINT16 MT7992_PER_CH_G_BW20_SIZE;

extern UINT16 MT7992_PER_CH_A5_BW20[];
extern UINT16 MT7992_PER_CH_A5_BW80[];
extern UINT16 MT7992_PER_CH_A5_BW160[];
extern UINT16 MT7992_PER_CH_A6_BW20[];
extern UINT16 MT7992_PER_CH_A6_BW80[];
extern UINT16 MT7992_PER_CH_A6_BW160[];
extern UINT16 MT7992_PER_CH_G_BW20[];
extern UINT16 MT7992_PER_CH_A5_BW20_SIZE;
extern UINT16 MT7992_PER_CH_A6_BW20_SIZE;
extern UINT16 MT7992_PER_CH_A5_BW80_SIZE;
extern UINT16 MT7992_PER_CH_A6_BW80_SIZE;
extern UINT16 MT7992_PER_CH_A5_BW160_SIZE;
extern UINT16 MT7992_PER_CH_A6_BW160_SIZE;


#endif /*PRE_CAL_MT7992_SUPPORT*/

#endif /* __MT7992_H__ */
