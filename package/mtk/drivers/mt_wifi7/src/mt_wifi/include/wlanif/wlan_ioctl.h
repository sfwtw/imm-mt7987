/******************************************************************************
*
* Copyright (c) 2011 TP-LINK Technologies CO.,LTD.
* All rights reserved.
*
* FILE NAME  :   wlan_ioctl.h
* VERSION    :   1.0
* DESCRIPTION:   ioctl definitions.
*
* AUTHOR     :   zhengxinggu <zhengxinggu@tp-link.net>
* CREATE DATE:   01/10/2011
*
* HISTORY    :
* 01   01/10/2011  zhengxinggu     Create.
* 02   05/30/2014  yangyang        Modify it for ralink.
*
******************************************************************************/
#ifndef _WLAN_IOCTL_H_
#define _WLAN_IOCTL_H_

enum
{
	WIOCTL_START = 0x1000,
	WIOCTL_GET_DEBUG		= (WIOCTL_START + 1),
	WIOCTL_SET_DEBUG		= (WIOCTL_START + 2),
	WIOCTL_SHOW_DBG_LVLS	= (WIOCTL_START + 3),
	WIOCTL_SET_FIXCHAN		= (WIOCTL_START + 4),
	WIOCTL_GET_FIXCHAN		= (WIOCTL_START + 5),
	WIOCTL_START_WLAN		= (WIOCTL_START + 6),
	WIOCTL_STOP_WLAN		= (WIOCTL_START + 7),
	WIOCTL_START_VAP		= (WIOCTL_START + 8),
	WIOCTL_STOP_VAP			= (WIOCTL_START + 9),
	WIOCTL_START_BEACON		= (WIOCTL_START + 10),
	WIOCTL_START_MFG		= (WIOCTL_START + 11),
	WIOCTL_STOP_MFG			= (WIOCTL_START + 12),
	WIOCTL_RST_DEV			= (WIOCTL_START + 13),
	WIOCTL_SET_DEF			= (WIOCTL_START + 14),
	WIOCTL_SET_BGNMODE		= (WIOCTL_START + 15),
	WIOCTL_SET_DOMAIN		= (WIOCTL_START + 16),
	WIOCTL_SET_CHANWIDTH	= (WIOCTL_START + 17),
	WIOCTL_GET_CHANNEL		= (WIOCTL_START + 18),
	WIOCTL_SET_CHANNEL		= (WIOCTL_START + 19),
	WIOCTL_SET_CHAIN		= (WIOCTL_START + 20),
	WIOCTL_SET_TXCHAIN		= (WIOCTL_START + 21),
	WIOCTL_SET_RXCHAIN		= (WIOCTL_START + 22),
	WIOCTL_GET_TXCHAIN		= (WIOCTL_START + 23),
	WIOCTL_GET_RXCHAIN		= (WIOCTL_START + 24),
	WIOCTL_SET_APMODE		= (WIOCTL_START + 25),
	WIOCTL_GET_SLAVEAP		= (WIOCTL_START + 26),
	WIOCTL_SET_SLAVEAP		= (WIOCTL_START + 27),
	WIOCTL_GET_BSSID		= (WIOCTL_START + 28),
	WIOCTL_SET_BSSID		= (WIOCTL_START + 29),
	WIOCTL_GET_SSID			= (WIOCTL_START + 30),
	WIOCTL_SET_SSID			= (WIOCTL_START + 31),
	WIOCTL_SET_HIDESSID		= (WIOCTL_START + 32),
	WIOCTL_SET_ACLPOLICY	= (WIOCTL_START + 33),
	WIOCTL_ADD_ACLMAC		= (WIOCTL_START + 34),
	WIOCTL_DEL_ACLMAC		= (WIOCTL_START + 35),
	WIOCTL_SHOW_ACL			= (WIOCTL_START + 36),
	WIOCTL_ADD_NAWDS		= (WIOCTL_START + 37),
	WIOCTL_DEL_NAWDS		= (WIOCTL_START + 38),
	WIOCTL_SET_AUTH			= (WIOCTL_START + 39),
	WIOCTL_SET_CIPHER		= (WIOCTL_START + 40),
	WIOCTL_GET_KEYIDX		= (WIOCTL_START + 41),
	WIOCTL_SET_KEYIDX		= (WIOCTL_START + 42),
	WIOCTL_SET_KEY			= (WIOCTL_START + 43),
	WIOCTL_SET_REKEYTIME	= (WIOCTL_START + 44),
	WIOCTL_SET_TXPWR		= (WIOCTL_START + 45),
	WIOCTL_SET_WME			= (WIOCTL_START + 46),
	WIOCTL_SET_ISOLATE		= (WIOCTL_START + 47),
	WIOCTL_SET_RTS			= (WIOCTL_START + 48),
	WIOCTL_SET_FRAG			= (WIOCTL_START + 49),
	WIOCTL_SET_INTVAL		= (WIOCTL_START + 50),
	WIOCTL_SET_DTIM			= (WIOCTL_START + 51),
	WIOCTL_SET_SGI			= (WIOCTL_START + 52),
	WIOCTL_SET_WPS			= (WIOCTL_START + 53),
	WIOCTL_SET_BCNIE		= (WIOCTL_START + 54),
	WIOCTL_SET_RSPIE		= (WIOCTL_START + 55), /* WPS Response IE(responding to probe req) */
	WIOCTL_GET_MACADDR		= (WIOCTL_START + 56),
	WIOCTL_GET_STAINFO		= (WIOCTL_START + 57),
	WIOCTL_GET_STATUS		= (WIOCTL_START + 58),
	WIOCTL_SCAN_REQ			= (WIOCTL_START + 59),
	WIOCTL_SCAN_RESULTS		= (WIOCTL_START + 60),
	WIOCTL_CANDIDATE_APS	= (WIOCTL_START + 61),
	WIOCTL_SET_PMK			= (WIOCTL_START + 62),
	WIOCTL_SEND_EAP			= (WIOCTL_START + 63),
	WIOCTL_DEAUTH			= (WIOCTL_START + 64),
	WIOCTL_SET_WPS_LED		= (WIOCTL_START + 65),
	WIOCTL_SET_CAL			= (WIOCTL_START + 66),
	WIOCTL_SET_FREQERR		= (WIOCTL_START + 67),
	WIOCTL_SAVE_CAL			= (WIOCTL_START + 68),
	WIOCTL_TX_FRAME			= (WIOCTL_START + 69),
	WIOCTL_SET_PAPRD		= (WIOCTL_START + 70),
	WIOCTL_SHOW_PKT			= (WIOCTL_START + 71),
	WIOCTL_SHOW_BR			= (WIOCTL_START + 72),
	WIOCTL_CLEAR_BREXT		= (WIOCTL_START + 73),
	WIOCTL_SHOW_MCAST		= (WIOCTL_START + 74),
	WIOCTL_DETECT_RST		= (WIOCTL_START + 75), /* add by lty for detect */
	WIOCTL_DETECT_ADDR_TYPE_SET	= (WIOCTL_START + 76),
	WIOCTL_DETECT_CLR			= (WIOCTL_START + 77),
	WIOCTL_DETECT_STATUS_GET	= (WIOCTL_START + 78),
	WIOCTL_SET_DETECT_MAC		= (WIOCTL_START + 79),	/* set SA of detecting packets */
	WIOCTL_SET_DETECT_LANIP		= (WIOCTL_START + 80),			/* for lan ip conflict detecting */
	WIOCTL_GET_DETECT_LANIP_STATUS	= (WIOCTL_START + 81),		/* get lan ip conflict detecting status */
	WIOCTL_GET_LANIP_CONFLICT		= (WIOCTL_START + 82),		/* get whether lan ip conflicts with rootap */
	WIOCTL_GET_DETECT_DHCPS_STATUS	= (WIOCTL_START + 83),		/* get dhcps detecting status */
	WIOCTL_GET_DETECT_DHCPS_EXISTS	= (WIOCTL_START + 84),		/* get whether rootap has dhcp server */
	WIOCTL_UPDATE_BCN		= (WIOCTL_START + 85),
	WIOCTL_START_WARMUP		= (WIOCTL_START + 86),
	WIOCTL_STOP_WARMUP		= (WIOCTL_START + 87),
	WIOCTL_SET_TX99			= (WIOCTL_START + 88),
	WIOCTL_SET_TXCONTINUE	= (WIOCTL_START + 89),
	WIOCTL_START_TX99		= (WIOCTL_START + 90),
	WIOCTL_STOP_TX99		= (WIOCTL_START + 91),
	WIOCTL_SET_TURBO_LED	= (WIOCTL_START + 92),
	WIOCTL_SET_TURBO_MODE	= (WIOCTL_START + 93),
	WIOCTL_GET_MFG_STATUS	= (WIOCTL_START + 94),
	WIOCTL_SET_VLANID		= (WIOCTL_START + 95),
	WIOCTL_SET_LANACCESS	= (WIOCTL_START + 96),
	WIOCTL_SEND_PROBEREQ	= (WIOCTL_START + 97),
	WIOCTL_SET_SHORT_PREAMBLE	= (WIOCTL_START + 98),
	WIOCTL_SET_VAP_MAXSTA	= (WIOCTL_START + 99),				/* set the maximum stas of vap */
	WIOCTL_NEW_STA_NOTIFY_ENABLE	= (WIOCTL_START + 100),
	/* Insert SOHO public wioctl here after all teams confirmed */

	WIOCTL_PRIVATE_START	= 0x2000,
	WIOCTL_SET_MUMIMO		= (WIOCTL_PRIVATE_START + 1),		/* 5G MU-MIMO */
	WIOCTL_SET_SKU			= (WIOCTL_PRIVATE_START + 2),		/* SRRC */
	WIOCTL_WSS_COMMON		= (WIOCTL_PRIVATE_START + 3),		/* wlan smart steer */
	WIOCTL_WSS_GET_STALIST	= (WIOCTL_PRIVATE_START + 4),
	WIOCTL_ADD_ACLMAC_STEER	= (WIOCTL_PRIVATE_START + 5),
	WIOCTL_DEL_ACLMAC_STEER	= (WIOCTL_PRIVATE_START + 6),
	WIOCTL_SHOW_ACL_STEER	= (WIOCTL_PRIVATE_START + 7),
	WIOCTL_GET_WLAN_STATUS	= (WIOCTL_PRIVATE_START + 8),		/* wlan inited check */
	WIOCTL_GET_CAPINFO		= (WIOCTL_PRIVATE_START + 9),
	WIOCTL_SET_WPS_IN_PROGRESS = (WIOCTL_PRIVATE_START + 10),
	/* Insert chip private wioctl here */
	WIOCTL_END
};

enum
{
	WLAN_AP_MODE_AP = 0,
	WLAN_AP_MODE_CLIENT,
	WLAN_AP_MODE_WDSRPT,
	WLAN_AP_MODE_UNIRPT,
	WLAN_AP_MODE_PPT,
	WLAN_AP_MODE_MPT
};

enum apcli_state
{
	STA_STATE_DOWN = 0,
	STA_STATE_IDLE,
	STA_STATE_SCAN,
	STA_STATE_AUTH,
	STA_STATE_ASSOC,
	STA_STATE_RUN,
	STA_STATE_4WAYHANDSHAKE
};

/* adjust for multiBandRouter */
enum
{
	WLAN_MODE_SELECT_MIN = 0,
	WLAN_MODE_11B_ONLY = WLAN_MODE_SELECT_MIN,
	WLAN_MODE_11G_ONLY = 1,
	WLAN_MODE_11BG_MIXED = 2,
	WLAN_MODE_11N_ONLY = 3,
	WLAN_MODE_11BGN_MIXED = 4,
	WLAN_MODE_SELECT_MAX = WLAN_MODE_11BGN_MIXED,

/* for 5G */
	WLAN_MODE_11A_ONLY = 5,
	WLAN_MODE_11N_5G_ONLY = 6,

/* for web support */
	WLAN_MODE_11A_11N_MIXED = 7,
	WLAN_MODE_5G_MIN  = WLAN_MODE_11A_11N_MIXED,
	
	WLAN_MODE_11A_11N_11AC_MIXED = 8,
	WLAN_MODE_5G_MAX = WLAN_MODE_11A_11N_11AC_MIXED
};

enum
{
	WLAN_CHAN_WIDTH_AUTO = 0,
	WLAN_CHAN_WIDTH_20M = 1,
	WLAN_CHAN_WIDTH_40M = 2,

/* for 5G */
	WLAN_CHAN_WIDTH_80M = 3,
	WLAN_CHAN_WIDTH_80M_ADD_80M = 4,
};

/* for 5G */
/* for wlanCommonCfg.uFreqBandMode */
enum
{
	FreqBandMode_NONE = 0,
	FreqBandMode_2G = 1,
	FreqBandMode_5G = 2,
	FreqBandMode_2G_5G = 3,
	FreqBandMode_MAX = FreqBandMode_2G_5G,
};

enum
{
	WLAN_AUTH_MIN = 0,
	WLAN_AUTH_NONE = WLAN_AUTH_MIN,
	WLAN_AUTH_WEP_OPEN,
	WLAN_AUTH_WEP_SHARE,
	WLAN_AUTH_WEP_AUTO,
	WLAN_AUTH_WPA,
	WLAN_AUTH_WPA2,
	WLAN_AUTH_WPAWPA2,
	WLAN_AUTH_PSK,
	WLAN_AUTH_PSK2,
	WLAN_AUTH_PSKPSK2,
	WLAN_AUTH_MAX = WLAN_AUTH_PSKPSK2
};

enum
{
	WLAN_CIPHER_MIN = 0,
	WLAN_CIPHER_NONE = WLAN_CIPHER_MIN,
	WLAN_CIPHER_WEP,
	WLAN_CIPHER_TKIP,
	WLAN_CIPHER_AES,
	WLAN_CIPHER_AUTO,
	WLAN_CIPHER_MAX = WLAN_CIPHER_AUTO
};

enum
{
	STA_STATUS_AUTH = 0,
	STA_STATUS_ASSOC,
	STA_STATUS_WPA,
	STA_STATUS_WPA_PSK,
	STA_STATUS_WPA2,
	STA_STATUS_WPA2_PSK,
	STA_STATUS_802_1X,
	STA_STATUS_JOINED,
	STA_STATUS_UP,
	STA_STATUS_DOWN,
	STA_STATUS_NONE,
	STA_STATUS_MAX = STA_STATUS_NONE + 1
};

typedef struct
{
	UINT8	bssid[MAC_ADDR_LEN];
	UINT8 	ssid[MAX_SSID_LEN + 1];	
	UINT8	rssi;
	UINT8	channel;
	UINT8	authMode;
	UINT8	uBgnMode;
	UINT8	chanWidth;
} WLAN_AP_ENTRY_T;

typedef struct
{
	WLAN_AP_ENTRY_T		apEntry[MAX_BSS_CNT];	
	UINT8				apCnt;
} WLAN_AP_LIST_T;

typedef struct
{
	UINT8				mac[MAC_ADDR_LEN];	 /*STA µÄMACµØÖ·*/
	UINT8				status;
	UINT8				cipher;
	UINT8				inact;
	UINT8				rate;
	UINT8				ccq;
	UINT8				mode;
	UINT8				pwrSave;
	UINT32				assoctime;
	UINT32				rxPkts;				
	UINT32				txPkts;
} WLAN_STA_ENTRY_T;

typedef struct
{
	UINT8				staCnt;
	WLAN_STA_ENTRY_T  	staEntry[MAX_NODE_CNT];
} WLAN_STA_LIST_T;	

/* for 5G */
typedef struct
{
	UINT8	bssid[MAC_ADDR_LEN];
	UINT8 	ssid[MAX_SSID_LEN + 1];	
	UINT8	rssi;
	UINT8	channel;
	UINT8	authMode;
	UINT8	uMode;
	UINT8	chanWidth;
} WLAN_5G_AP_ENTRY_T;

typedef struct
{
	WLAN_5G_AP_ENTRY_T	apEntry[MAX_BSS_CNT];	
	UINT8				apCnt;
} WLAN_5G_AP_LIST_T;

#endif /* _WLAN_IOCTL_H_ */
