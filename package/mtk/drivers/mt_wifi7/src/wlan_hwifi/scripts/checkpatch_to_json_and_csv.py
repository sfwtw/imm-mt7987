import json
import os
import subprocess

json_file_name = "summary.json"
csv_file_name = "summary.csv"
summary = {"All": {"WARNING": {"Count": 0}, "ERROR": {"Count": 0}}}
warning_count = 0
error_count = 0

def check_file_generated_by(file_path):
    if "_coda" in file_path:
        return "CODA"
    
    with open(file_path, "r") as f:
        read_text = f.read()
        
        if "This file is auto generated by CODA" in read_text:
            return "CODA"
        elif "generate by structure_parser.py" in read_text:
            return "structure_parser"
        else:
            return None

if os.getcwd().endswith("wlan_hwifi"):
    if not os.path.isfile(json_file_name) or not os.path.getsize(json_file_name):
        with open(json_file_name, "w") as f: 
            for path, subdirs, files in os.walk("."):
                for file in files:
                    if file.endswith(".c") or file.endswith(".h"):
                        file_path = os.path.join(path, file)
                        summary[file_path] = {"WARNING": {"Count": 0}, "ERROR": {"Count": 0}}
                        #run_cmd = ["/usr/src/linux-headers-3.16.0-30/scripts/checkpatch.pl", "-f", "--no-tree", file_path]
                        run_cmd = ["./script/checkpatch.pl", "-f", "--no-tree", file_path]                    
                        generator = check_file_generated_by(file_path)
                        
                        if generator is not None:
                            del summary[file_path]
                            print("Filepath: %s" % file_path)
                            print("\tSkip since file is generated by %s" % generator)
                            continue
                        
                        try:
                            subprocess.check_output(run_cmd)
                        except subprocess.CalledProcessError as e:
                            i = 0
                            isFilePathWrite = 0
                            output_arr = e.output.decode().split("\n")
                            
                            for output in output_arr:
                                if not output:
                                    i = 0
                                elif i == 0:
                                    # index 0 is type, index 1 is mesg
                                    output_type_mesg = output.split(":", 1)
                                    i+=1
                                    
                                    if ((output_type_mesg[0] != "WARNING" and 
                                         output_type_mesg[0] != "ERROR")  or 
                                         len(output_type_mesg) < 2):
                                        
                                        if isFilePathWrite == 0:
                                            print("Filepath: %s" % file_path)
                                            isFilePathWrite = 1
                                        if "If any of these errors are false positives, please report" not in output:
                                            if "total" in output:
                                                total_mesg = output.split(" ")
                                                
                                                if len(total_mesg) < 8:
                                                    print("\t***%s***" % output) 
                                                    continue
                                                else:
                                                    error_count   += int(total_mesg[1])
                                                    warning_count += int(total_mesg[3])
                                            
                                            print("\t%s" % output)        
                                    else:
                                        #Add to All's summary
                                        if output_type_mesg[1] in summary["All"][output_type_mesg[0]]:
                                            summary["All"][output_type_mesg[0]][output_type_mesg[1]] += 1
                                        else:
                                            summary["All"][output_type_mesg[0]][output_type_mesg[1]] = 1
                                        summary["All"][output_type_mesg[0]]["Count"] += 1
                                        
                                        #Add to individual file's summary
                                        if output_type_mesg[1] in summary[file_path][output_type_mesg[0]]:
                                            summary[file_path][output_type_mesg[0]][output_type_mesg[1]] += 1
                                        else:
                                            summary[file_path][output_type_mesg[0]][output_type_mesg[1]] = 1                                
                                        summary[file_path][output_type_mesg[0]]["Count"] += 1
                        except:
                            exit(1)
            
            print("Warning count: %6d, Error count %6d" % (warning_count, error_count))
            #print("Dict -> Error count: %6d, Warning count %6d" % (summary["All"]["ERROR"]["Count"], summary["All"]["WARNING"]["Count"]))
            json.dump(summary, f)
            print("Data is written into %s" % json_file_name)
    else:
        print("%s existed" % json_file_name)
        
    with open(json_file_name, "r") as json_file:
        summary = json.load(json_file)
        
        with open(csv_file_name, "w") as csv_file:
            for file_path in summary:
                if file_path == "All":
                    continue
                
                # Add warning message to file_path if doesn't exist and value is set to 0
                for mesg in summary["All"]["WARNING"]:
                    if mesg not in summary[file_path]["WARNING"]:
                        summary[file_path]["WARNING"][mesg] = 0
                
                # Add error message to file_path if doesn't exist and value is set to 0
                for mesg in summary["All"]["ERROR"]:
                    if mesg not in summary[file_path]["ERROR"]:
                        summary[file_path]["ERROR"][mesg] = 0
            
            # First row are WARNING and ERROR
            repeat_count = len(summary["All"]["WARNING"])
            csv_file.write(",WARNING%sERROR\n" % ("," * repeat_count))
            
            # Second row and store each description of WARNING and ERROR
            type_text = ""
            
            # Remaining rows(In each row, first column is file_path, and remaing columns are the count number of WARNING and ERROR)
            filepath_text = {}
            
            # Create key for each file_path and first column is stored as file_path
            for file_path in summary:
                filepath_text [file_path] = str("%s" % file_path)
            
            # Add WARNING description in type_text and the count number for each file_path in filepath_text
            for mesg in summary["All"]["WARNING"]:
                if mesg == "Count":
                    continue
                
                rep_mesg = mesg.replace(",", "")
                type_text += str(",%s" % rep_mesg)
                
                for file_path in summary:
                    filepath_text[file_path] += str(",%s" % summary[file_path]["WARNING"][mesg])
            
            # The last column of warning is "Count"
            type_text += ",Count"
            
            for file_path in summary:
                filepath_text[file_path] += str(",%s" % summary[file_path]["WARNING"]["Count"])

            # Add ERROR description in type_text and the count number for each file_path in filepath_text        
            for mesg in summary["All"]["ERROR"]:
                if mesg == "Count":
                    continue
                
                rep_mesg = mesg.replace(",", "")
                type_text += str(",%s" % rep_mesg)
                
                for file_path in summary:
                    filepath_text[file_path] += str(",%s" % summary[file_path]["ERROR"][mesg])
            
            # The last column of error is "Count"
            type_text += ",Count"
            
            for file_path in summary:
                filepath_text[file_path] += str(",%s" % summary[file_path]["ERROR"]["Count"])
            
            # Write second row and third row (All)
            csv_file.write("%s\n" % type_text)
            csv_file.write("%s\n" % filepath_text["All"])
            
            # Write remaing rows (Other than All)
            for file_path in filepath_text:
                if file_path == "All":
                    continue
                else:
                    csv_file.write("%s\n" % filepath_text[file_path])
            
            print("Data is written into %s" % csv_file_name)

    fix_inplace = input("EXPERIMENTAL - Do you want to fix code inplace? (Y/N)")

    if fix_inplace == "Y" or fix_inplace == "y":
        warning_count = 0
        error_count = 0
        file_error_after_fix = []
        
        for file_path in summary:
            if "All" in file_path:
                continue
            
            #run_cmd = ["/usr/src/linux-headers-3.16.0-30/scripts/checkpatch.pl", "--fix-inplace", "-f", "--no-tree", file_path]
            run_cmd = ["./script/checkpatch.pl", "--fix-inplace", "-f", "--no-tree", file_path]
                        
            try:
                subprocess.check_output(run_cmd)
            except subprocess.CalledProcessError as e:
                pass

            #run_cmd = ["/usr/src/linux-headers-3.16.0-30/scripts/checkpatch.pl", "-f", "--no-tree", file_path]
            run_cmd = ["./script/checkpatch.pl", "-f", "--no-tree", file_path]
                        
            try:
                subprocess.check_output(run_cmd)
            except subprocess.CalledProcessError as e:
                print("Filepath: %s" % file_path)
                print("\tCheck again after fixed")
                output_arr = e.output.decode().split("\n")
                
                for output in output_arr:
                    if "total:" in output:
                        total_mesg = output.split(" ")
                        
                        if len(total_mesg) < 8:
                            print("\t***%s***" % output) 
                            continue
                        else:
                            error_count   += int(total_mesg[1])
                            warning_count += int(total_mesg[3])
                            
                            if int(total_mesg[1]):
                                file_error_after_fix.append(file_path)
                        
                        print("\t%s" % output)
        
        print("(Before fix) Warning count = %6d, Error count = %6d" % (summary["All"]["WARNING"]["Count"], summary["All"]["ERROR"]["Count"]))
        print("(After fix)  Warning count = %6d, Error count = %6d" % (warning_count, error_count))
        
        if len(file_error_after_fix) > 0:
            print("The following file(s) still has error after fixed")
            
            for file_path in file_error_after_fix:
                print("\t%s" % file_path)

else:
    print("Please run command within \"wlan_hwifi\" directory") 